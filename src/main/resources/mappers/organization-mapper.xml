<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="organizationMapper">

	<resultMap id="memberResult" type="OrganizationDto">
		<id column="user_no" property="userNo" />
		<result column="user_name" property="userName" />
		<result column="user_id" property="userId" />
		<result column="phone" property="phone" />
		<result column="bank_account" property="bankAccount" />
		<result column="bank" property="bank" />
		<result column="email" property="email" />
		<result column="post_code" property="postCode" />
		<result column="address" property="address" />
		<result column="detail_address" property="detailAddress" />
		<result column="total_address" property="totalAddress" />
		<result column="profile_url" property="profileUrl" />
		<result column="modify_date" property="modifyDate" />
		<result column="modify_user_no" property="modifyUserNo" />
		<result column="status" property="status" />
		<result column="vacation_count" property="vacationCount" />
		<result column="auth_level" property="authLevel" />
		<result column="salary" property="salary" />
		<result column="dept_code" property="deptCode" />
		<result column="team_code" property="teamCode" />
		<result column="position_code" property="positionCode" />
		<result column="regist_emp" property="registEmp" />
		<result column="dept" property="dept" />
		<result column="team" property="team" />
		<result column="posi" property="posi" />
		<result column="alltime" property="alltime" />
		<result column="totalSalary" property="totalSalary" />
		<result column="payment" property="payment" />
		
		<collection property="groupList" ofType="GroupDto">
			<result column="group_code" property="groupCode"/>
			<result column="code" property="code"/>
			<result column="code_name" property="codeName"/>
			<result column="upper_code" property="upperCode"/>
		</collection>
		
	</resultMap>
	
	<!-- 조직도 : 부서와 팀 가져오기 -->
	<select id="selectOrganizationChart" resultType="GroupDto">
		SELECT D1.CODE AS "CODE"
			 , D2.CODE AS "TEAMCODE"
			 , D1.CODE_NAME AS "DEPT"
		     , D2.CODE_NAME AS "TEAM"
		  FROM TB_GROUP D1
		  LEFT JOIN
		       TB_GROUP D2 ON D2.UPPER_CODE = D1.CODE 
		       AND D2.GROUP_CODE LIKE 'TEAM%'
		       AND D2.STATUS = 'Y'
		 WHERE D1.GROUP_CODE LIKE 'DEPT%'
	 	   AND D1.STATUS = 'Y'
         ORDER BY
               CODE ASC
             , TEAM ASC
	</select>

	<!-- 직원 전체 카운트 -->
	<select id="selectOrganizationListCount" resultType="_int">
		SELECT
			   COUNT(*)
		  FROM MEMBER
         WHERE STATUS = 'Y'
	</select>

	<!-- 직원 전체 조회(사진,성명,부서,팀명,직급,전화,이메일) -->
	<select id="selectOrganizationList" resultMap="memberResult">
		SELECT USER_NO
			 , PROFILE_URL
       		 , USER_NAME
       		 , D1.CODE_NAME AS "DEPT"
       		 , D2.CODE_NAME AS "TEAM"
      		 , (SELECT CODE_NAME FROM TB_GROUP WHERE GROUP_CODE LIKE 'POSI%' AND CODE = MEMBER.POSITION_CODE) AS "POSI"
      		 , PHONE
      		 , EMAIL
		  FROM MEMBER
		  JOIN TB_GROUP D2 ON MEMBER.TEAM_CODE = D2.CODE
     LEFT JOIN TB_GROUP D1 ON D2.UPPER_CODE = D1.CODE AND D1.GROUP_CODE LIKE 'DEPT%'
         WHERE D1.STATUS = 'Y'
           AND D2.STATUS = 'Y'
           AND MEMBER.STATUS = 'Y'
		 ORDER BY
			   USER_NO ASC
	</select>
	
	
	<!-- 직원 급여(사진,이름,부서,팀명,직급,근무시간(이번달 기준),시급, 시간*시급, 소득세 10%, 실지급 - 10%) -->
	<select id="selectAccountList" resultMap="memberResult">
		SELECT M.USER_NO
		     , M.PROFILE_URL
			 , M.USER_NAME
			 , M.USER_ID
			 , D1.CODE_NAME AS "DEPT"
			 , D2.CODE_NAME AS "TEAM"
			 , (SELECT CODE_NAME FROM TB_GROUP WHERE GROUP_CODE LIKE 'POSI%' AND CODE = M.POSITION_CODE) AS "POSI"
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1))
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = #{year}
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = #{month}
	           ), 0) AS "ALLTIME"
			 , SALARY
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1)) * M.SALARY
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = #{year}
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = #{month}
	           ), 0) AS "TOTALSALARY"
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1)) * M.SALARY * 0.9
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = #{year}
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = #{month}
	           ), 0) AS "PAYMENT"
			 , BANK
			 , BANK_ACCOUNT
	  	  FROM MEMBER M
	  	  JOIN TB_GROUP D2 ON M.TEAM_CODE = D2.CODE
	 LEFT JOIN TB_GROUP D1 ON D2.UPPER_CODE = D1.CODE AND D1.GROUP_CODE LIKE 'DEPT%'
	 LEFT JOIN ATTENDANCE A ON M.USER_NO = A.USER_NO
	 	 WHERE D1.STATUS = 'Y'
	 	   AND D2.STATUS = 'Y'
	 	   AND D1.CODE_NAME LIKE '%' || #{department} || '%'
	 	   AND D2.CODE_NAME LIKE '%' || #{team} || '%'
	 	   AND M.USER_NAME LIKE '%' || #{name} || '%'
	 	 GROUP BY
	 	 	   M.USER_NO
	 	 	 , M.PROFILE_URL
	 	 	 , M.USER_NAME
	 	 	 , M.USER_ID
	 	 	 , D1.CODE_NAME
	 	 	 , D2.CODE_NAME
	 	 	 , M.POSITION_CODE
	 	 	 , M.SALARY
	 	 	 , BANK
	 	 	 , BANK_ACCOUNT
	 	 ORDER BY
	 	 	   M.USER_NO ASC
	</select>
	
	<!-- 급여 상세 페이지 -->
	<select id="selectAccountDetail" resultMap="memberResult">
		SELECT M.USER_NO
		     , M.PROFILE_URL
			 , M.USER_NAME
			 , M.USER_ID
			 , D1.CODE_NAME AS "DEPT"
			 , D2.CODE_NAME AS "TEAM"
			 , (SELECT CODE_NAME FROM TB_GROUP WHERE GROUP_CODE LIKE 'POSI%' AND CODE = M.POSITION_CODE) AS "POSI"
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1))
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = 2024
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = 5
	           ), 0) AS "ALLTIME"
			 , SALARY
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1)) * M.SALARY
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = 2024
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = 5
	           ), 0) AS "TOTALSALARY"
			 , COALESCE(
	           (SELECT SUM(ROUND((CAST(A.CLOCK_OUT AS DATE) - CAST(A.CLOCK_IN AS DATE)) * 24, 1)) * M.SALARY * 0.9
	            FROM ATTENDANCE A 
	            WHERE M.USER_NO = A.USER_NO 
	              AND EXTRACT(YEAR FROM A.CLOCK_IN) = 2024
	              AND EXTRACT(MONTH FROM A.CLOCK_IN) = 5
	           ), 0) AS "PAYMENT"
			 , BANK
			 , BANK_ACCOUNT
	  	  FROM MEMBER M
	  	  JOIN TB_GROUP D2 ON M.TEAM_CODE = D2.CODE
	 LEFT JOIN TB_GROUP D1 ON D2.UPPER_CODE = D1.CODE AND D1.GROUP_CODE LIKE 'DEPT%'
	 LEFT JOIN ATTENDANCE A ON M.USER_NO = A.USER_NO
	 	 WHERE D1.STATUS = 'Y'
	 	   AND D2.STATUS = 'Y'
           AND M.USER_NO = 1051
	 	 GROUP BY
	 	 	   M.USER_NO
	 	 	 , M.PROFILE_URL
	 	 	 , M.USER_NAME
	 	 	 , M.USER_ID
	 	 	 , D1.CODE_NAME
	 	 	 , D2.CODE_NAME
	 	 	 , M.POSITION_CODE
	 	 	 , M.SALARY
	 	 	 , BANK
	 	 	 , BANK_ACCOUNT
	</select>
	
	
 	
 	<!-- 직원 검색 -->
 	<select id="selectSearchListCount" resultType="_int">
 		SELECT COUNT(*)
       	  FROM MEMBER
    	  JOIN TB_GROUP D2 ON MEMBER.TEAM_CODE = D2.CODE
     LEFT JOIN TB_GROUP D1 ON D2.UPPER_CODE = D1.CODE AND D1.GROUP_CODE LIKE 'DEPT%'
    	 WHERE D1.STATUS = 'Y'
           AND D2.STATUS = 'Y'
	       <if test="department != ''">
				AND D1.CODE_NAME = #{ department }
	       </if>
	       <if test="team != ''">
				AND D2.CODE_NAME = #{ team }
	       </if>
	       <if test="phone != ''">
				AND PHONE LIKE '%' || #{ phone } || '%'
	       </if>
	       <if test="name != ''">
				AND USER_NAME LIKE '%' || #{ name } || '%'
	       </if>
 	</select>
 	<select id="selectSearchList" resultMap="memberResult">
	 	SELECT USER_NO
			 , PROFILE_URL
       		 , USER_NAME
       		 , D1.CODE_NAME AS "DEPT"
       		 , D2.CODE_NAME AS "TEAM"
      		 , (SELECT CODE_NAME FROM TB_GROUP WHERE GROUP_CODE LIKE 'POSI%' AND CODE = MEMBER.POSITION_CODE) AS "POSI"
      		 , PHONE
      		 , EMAIL
		  FROM MEMBER
		  JOIN TB_GROUP D2 ON MEMBER.TEAM_CODE = D2.CODE
     LEFT JOIN TB_GROUP D1 ON D2.UPPER_CODE = D1.CODE AND D1.GROUP_CODE LIKE 'DEPT%'
         WHERE D1.STATUS = 'Y'
           AND D2.STATUS = 'Y'
           <if test="department != ''">
			    AND D1.CODE_NAME = #{ department }
			</if>
			<if test="team != ''">
			    AND D2.CODE_NAME = #{ team }
			</if>
			<if test="phone != ''">
			    AND PHONE LIKE '%' || #{ phone } || '%'
			</if>
			<if test="name != ''">
			    AND USER_NAME LIKE '%' || #{ name } || '%'
			</if>
		 ORDER BY
			   USER_NO ASC
 	</select>



	<!-- 1. 부서 조회 -->
	<select id="selectDepartment" resultMap="memberResult">
		SELECT CODE_NAME
		  FROM TB_GROUP
		 WHERE GROUP_CODE LIKE 'DEPT%'
		   AND STATUS = 'Y'
	</select>
	
	<!-- 2.1 팀 조회 : 부서가 선택되어 있어야함, 전체 팀 조회 -->
	<select id="selectTeamAll" resultMap="memberResult">
		SELECT CODE_NAME
		  FROM TB_GROUP
         WHERE GROUP_CODE LIKE 'TEAM%'
           AND STATUS = 'Y'
	</select>
	
	<!-- 2.2 팀 조회 : 부서가 선택되어 있어야함, 선택한 부서의 팀만 조회 -->
	<select id="selectTeam" resultMap="memberResult">
		SELECT CODE_NAME
		  FROM TB_GROUP
		 WHERE GROUP_CODE LIKE 'TEAM%'
		   AND UPPER_CODE
			 = (SELECT CODE
		  FROM TB_GROUP
		 WHERE GROUP_CODE LIKE 'DEPT%'
		   AND CODE_NAME = #{ codeName } )
		   AND STATUS = 'Y'
	</select>
	
	<!-- 3. 직급 조회 -->
	<select id="selectPosition" resultMap="memberResult">
		SELECT CODE_NAME
		  FROM TB_GROUP
		 WHERE GROUP_CODE LIKE 'POSI%'
	</select>
	
	<!-- 수정중 -->
	<select id="countEmployeesInDepartment" resultType="_int" parameterType="string">
        SELECT COUNT(*) 
		FROM TB_GROUP 
		WHERE CODE_NAME = #{departmentName}
		  AND GROUP_CODE LIKE 'DEPT%'
    </select>
	<select id="countEmployeesInTeam" resultType="_int" parameterType="string">
        <!-- SELECT COUNT(*) FROM employee WHERE team_name =  -->
        SELECT COUNT(*) 
		FROM TB_GROUP 
		WHERE CODE_NAME = #{teamName}
		  AND GROUP_CODE LIKE 'TEAM%';
    </select>


	<!-- ======================================== 조직관리  ========================================-->
	<!-- 부서 추가 -->
	<insert id="insertDepartment" >
		    INSERT INTO TB_GROUP (
		        GROUP_CODE, CODE, CODE_NAME, REGIST_DATE, MODIFY_DATE, STATUS, REGIST_EMP, MODIFY_EMP, UPPER_CODE
		    ) VALUES (
		        'DEPT01',
		        get_alphabet_sequence(SEQ_DNO.NEXTVAL),
		        #{deptName},
		        SYSDATE,
		        SYSDATE,
		        'Y',
		        #{userNo},
		        #{userNo},
		        NULL
		    )
	</insert>
	
	<!-- 부서명 변경 -->
	<update id="updateDepartmentName">
		UPDATE TB_GROUP
		   SET CODE_NAME = #{newName}
		     , MODIFY_DATE = SYSDATE
		     , MODIFY_EMP = #{userNo}
		 WHERE CODE = #{deptCode}
		   AND STATUS = 'Y'
    </update>
    
    <!-- 부서 삭제 -->
	<update id="deleteDepartment">
		UPDATE TB_GROUP
		   SET STATUS = 'N'
		     , MODIFY_DATE = SYSDATE
		     , MODIFY_EMP = #{userNo}
		 WHERE GROUP_CODE LIKE 'DEPT%'
		   AND CODE = #{deptCode}
    </update>
    <!-- 부서 삭제 시 하위 팀들도 삭제 STATUS N으로 모두 변경 -->
    <update id="deleteSubDepartment" parameterType="map">
        UPDATE TB_GROUP
           SET STATUS = 'N'
             , MODIFY_DATE = SYSDATE
             , MODIFY_EMP = #{userNo}
         WHERE UPPER_CODE = #{deptCode}
    </update>
	
	<!-- 팀 추가 -->
	<insert id="insertTeam">
        INSERT INTO TB_GROUP (
            GROUP_CODE, CODE, CODE_NAME, REGIST_DATE, MODIFY_DATE, STATUS, REGIST_EMP, MODIFY_EMP, UPPER_CODE
        ) VALUES (
            'TEAM01',
            get_team_alphabet_sequence(SEQ_TNO.NEXTVAL),
            #{teamName},
            SYSDATE,
            SYSDATE,
            'Y',
            #{userNo},
            #{userNo},
            #{deptCode}
        )
    </insert>
    
    <!-- 팀명 수정 -->
    <update id="updateTeamName" parameterType="map">
        UPDATE TB_GROUP
           SET CODE_NAME = #{newName}
             , MODIFY_DATE = SYSDATE
             , MODIFY_EMP = #{userNo}
         WHERE CODE = #{teamCode}
           AND STATUS = 'Y'
    </update>
    
    <!-- 팀 삭제 -->
    <delete id="deleteTeam">
		UPDATE TB_GROUP
		   SET STATUS = 'N'
		     , MODIFY_DATE = SYSDATE
		     , MODIFY_EMP = #{userNo}
	     WHERE UPPER_CODE = #{deptCode} 
		   AND GROUP_CODE LIKE 'TEAM%'
		   AND CODE_NAME = #{teamName}
    </delete>
	
	<!-- 팀 사용자 인원수 카운트 : 인원이 있으면 삭제버튼 DISABLE 처리하기 -->
	<select id="countMember" resultType="hashmap">
		SELECT D1.CODE AS "CODE",
		       D1.CODE_NAME AS "DEPT",
		       D2.CODE_NAME AS "TEAM",
		       (SELECT COUNT(*) FROM MEMBER M WHERE M.TEAM_CODE = D2.CODE) AS "MEMBER_COUNT"
		  FROM TB_GROUP D1
		  LEFT JOIN TB_GROUP D2 ON D2.UPPER_CODE = D1.CODE
		                       AND D2.GROUP_CODE LIKE 'TEAM%'
		                       AND D2.STATUS = 'Y'
		 WHERE D1.GROUP_CODE LIKE 'DEPT%'
		   AND D1.STATUS = 'Y'
		 ORDER BY D1.CODE_NAME ASC
    </select>
	
	<!-- 부서명 중복체크 후 생성못하게 하기 -->
	<select id="countDepartmentByName" resultType="int">
        SELECT COUNT(*)
        FROM TB_GROUP
        WHERE CODE_NAME = #{deptName}
          AND GROUP_CODE LIKE 'DEPT%'
          AND STATUS = 'Y'
    </select>

	<!-- 팀명 중복체크 후 생성못하게 : 다른 부서는 동일한 팀명 가능 -->
    <select id="countTeamByNameAndDept" resultType="int">
        SELECT COUNT(*)
        FROM TB_GROUP
        WHERE CODE_NAME = #{teamName}
          AND UPPER_CODE = #{deptCode}
          AND GROUP_CODE LIKE 'TEAM%'
          AND STATUS = 'Y'
    </select>
	
	
</mapper>